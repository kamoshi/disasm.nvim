*disassemble.txt*  An easy popup disassembler for C/C++ code

Author:  Marco De Donno <mdedonno1337@gmail.com>
License: GPLv3

INTRODUCTION                                    *disassemble* *dissassmble.nvim*

Whenever you edit a C/C++ file, a set of commands is defined to show in a
popup or in a new buffer the disassembled assembler code of the compiled file.
You can obviously configure the compilation process and the dump of the
assembler code as you whish.

With the default configuration, this plugin requires the presence of |objdump|
in the PATH. This plugin also requires the commands |file| and |expand|, but
they should be installed with the basic utilities.

By default, this plugin enables the automatic compilation if the compiled file
is not present on disk or if the source code is more recent thant the compiled
file. This default behaviour requires a compiler on the system, but can be
disabled with the `let g:disassemble_enable_compilation=v:false` command in
your vimrc configuration.

CONFIGURATION                                   *disassemble-configuration*

                                                *disassemble-plugin-options*
Plugin options~

This plugin has multiple configuration options, mainly to change default
compilation and asm code extraction commands, but also on general behaviours.

                                                *g:disassemble_focus_on_second_call*
g:disassemble_focus_on_second_call
                        Focus and move the cursor to the popup if calling the
                        |:Disassemble| or |:DisassembleFull| command again.
                        This is usefull to focus the asm code by running twice
                        the main binding. Take a boolean value; the default
                        value is set to |v:false|. 

                                                *g:disassemble_enable_compilation*
g:disassemble_enable_compilation
                        Enable the compilation done by this plugin. If
                        enabled, this plugin will ask and use the complation
                        commands to compile the binary as needed (if the ELF
                        file does not exists or if the source code is newer
                        that the ELF file). Take a boolean value; the default
                        value is set to |v:true|.
                                        
                                                *g:disassemble_default_compilation_command*
g:disassemble_default_compilation_command
                        Set the default compilation command. This string will
                        be treated as raw vim command at buffer-configuration
                        time; this allows you to put raw vimscript instruction
                        in the string as follows:

>
  let g:disassemble_default_binary_file = 'expand("%:r")'

  let g:disassemble_default_objdump_command = '"objdump --demangle --line-numbers --file-headers --file-offsets --source --no-show-raw-insn --disassemble " . expand("%:r")'

  let g:disassemble_default_compilation_command = 'printf( "gcc %s -o %s -g", expand("%"), expand("%:r") )'
<

                        In those examples, the `expand("%s")` instructions are
                        not evaluated on load, but only by the `execute`
                        instruction in the |:DisassembleConfig| function. To
                        allows those configuration options to work, you have
                        to be aware of the escape of quotes; in those
                        examples, the main quote is a simple quote, and the
                        internal quotes are double; you have to escape
                        correctly the inner-quotes as needed to have a single
                        string at the end in the variable.

                                                *g:disassemble_configuration_extension*
g:disassemble_configuration_extension
                        This variables stores the configuration for the
                        compiler, disassembler and binary file name for the
                        current file. This extension is added to the name of
                        the current file with the extention (for the file
                        `test.c` and this variable set to `disconfig`, the
                        configuration file is by default `test.c.disconfig`).
                        
>
    let g:disassemble_configuration_extension = "disconfig"
<

                                                *g:disassemble_autosave*
g:disassemble_autosave
                        This enable the automatic save of the buffer before
                        compiling/dumping the asm code. By default, this is
                        set to `v:true`.
                        
                                                *g:disassemble-compilation-configuration*
Compilation configuration~

The configuration of the plugin is done per buffer (you can have a different
configuration for each file open). The compilation and objdump options are
asked when using for the first time the plugin functions.

When using the |:Disassemble| or |:DisassembleFull| commands for the first
time in a buffer, the configuration prompt will be displayed. The commands are
pre-populated with basic compilation and objdump commands.

You can edit those commands; they will be stored in the buffer variables for
later use.

If you want to edit the configuration for an already configured buffer, you
can call the |:DisassembleConfig| command; the configuration prompt will be
displayed, with the previous configuration pre-populated.

It's also possible to set the compilation and objdump commands in the top of
the file. When running the |:DisassembleConfig| command, those will be loaded
as default (instead of the ones by default in the plugin). The search of the
commands is done in the 10 first lines of the current file; the
|:DisassembleConfig| function search for the tag 'compile:', 'objdump:' and
'binary_file:', and store those values as default values for the current
buffer.
>
  /*
   * compile: gcc test.c -o test -g -lm -fopenmp -lgmp
   * objdump: objdump --demangle --line-numbers --file-headers --file-offsets --source --no-show-raw-insn --disassemble test
   * binary_file: test
   */
  #include <stdlib.h>
  ...
<

COMMANDS                                        *disassemble-commands*

There commands are local to the buffer in which they work.

                                                *:Disassemble*
:Disassemble            Disassemble the current line, and show the result in a
                        popup window. Once the popup opened, it will
                        automatically close on *CursorMoved* or *BufLeave*
                        events.

                                                *:DisassembleFull*
:DisassembleFull        Disassemble the current line, and show the result in a
                        a new buffer. This new buffer is set to 'readonly'
                        with 'filetype' set to 'asm' by default.

                                                *:DisassembleConfig*
:DisassembleConfig      Configure the compilation and objdump export for the
                        current buffer. This configuration is stored in a *b:*
                        variable, hence is done per buffer. This function is
                        automatically called the first time the |:Disassemble|
                        or the |:DisassembleFull| functions are called in a
                        buffer.
                        
                                                *:DisassembleFocus*
:DisassembleFocus       Focus and move the cursor to the popup window. The popup
                        window is not closed automatically on cursor move.
                        
ABOUT                                           *disassemble-about*

Grab the latest version or report a bug on GitHub:

https://github.com/mdedonno1337/disassemble.nvim

vim:tw=78:et:ft=help:norl:

